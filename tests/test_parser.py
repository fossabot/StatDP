from lightdp.lexer import build_lexer
from lightdp.parser import build_parser
import jsonpickle


def test_parser():
    lexer = build_lexer()
    parser = build_parser()
    precondition, type_map = parser.parse('precondition(q[i] >= -1 and q[i] <= 1); T, N, len, epsilon : num(0)', lexer=lexer)
    assert jsonpickle.encode(precondition) == """{"py/reduce": [{"py/type": "_ast.Module"}, {"py/tuple": []}, {"body": [{"py/reduce": [{"py/type": "_ast.Expr"}, {"py/tuple": []}, {"col_offset": 0, "lineno": 1, "value": {"py/reduce": [{"py/type": "_ast.BoolOp"}, {"py/tuple": []}, {"col_offset": 0, "lineno": 1, "op": {"py/reduce": [{"py/type": "_ast.And"}, {"py/tuple": []}, {}, null, null]}, "values": [{"py/reduce": [{"py/type": "_ast.Compare"}, {"py/tuple": []}, {"col_offset": 0, "comparators": [{"py/reduce": [{"py/type": "_ast.UnaryOp"}, {"py/tuple": []}, {"col_offset": 8, "lineno": 1, "op": {"py/reduce": [{"py/type": "_ast.USub"}, {"py/tuple": []}, {}, null, null]}, "operand": {"py/reduce": [{"py/type": "_ast.Num"}, {"py/tuple": []}, {"col_offset": 9, "lineno": 1, "n": 1}, null, null]}}, null, null]}], "left": {"py/reduce": [{"py/type": "_ast.Subscript"}, {"py/tuple": []}, {"col_offset": 0, "ctx": {"py/reduce": [{"py/type": "_ast.Load"}, {"py/tuple": []}, {}, null, null]}, "lineno": 1, "slice": {"py/reduce": [{"py/type": "_ast.Index"}, {"py/tuple": []}, {"value": {"py/reduce": [{"py/type": "_ast.Name"}, {"py/tuple": []}, {"col_offset": 2, "ctx": {"py/id": 12}, "id": "i", "lineno": 1}, null, null]}}, null, null]}, "value": {"py/reduce": [{"py/type": "_ast.Name"}, {"py/tuple": []}, {"col_offset": 0, "ctx": {"py/id": 12}, "id": "q", "lineno": 1}, null, null]}}, null, null]}, "lineno": 1, "ops": [{"py/reduce": [{"py/type": "_ast.GtE"}, {"py/tuple": []}, {}, null, null]}]}, null, null]}, {"py/reduce": [{"py/type": "_ast.Compare"}, {"py/tuple": []}, {"col_offset": 15, "comparators": [{"py/reduce": [{"py/type": "_ast.Num"}, {"py/tuple": []}, {"col_offset": 23, "lineno": 1, "n": 1}, null, null]}], "left": {"py/reduce": [{"py/type": "_ast.Subscript"}, {"py/tuple": []}, {"col_offset": 15, "ctx": {"py/id": 12}, "lineno": 1, "slice": {"py/reduce": [{"py/type": "_ast.Index"}, {"py/tuple": []}, {"value": {"py/reduce": [{"py/type": "_ast.Name"}, {"py/tuple": []}, {"col_offset": 17, "ctx": {"py/id": 12}, "id": "i", "lineno": 1}, null, null]}}, null, null]}, "value": {"py/reduce": [{"py/type": "_ast.Name"}, {"py/tuple": []}, {"col_offset": 15, "ctx": {"py/id": 12}, "id": "q", "lineno": 1}, null, null]}}, null, null]}, "lineno": 1, "ops": [{"py/reduce": [{"py/type": "_ast.LtE"}, {"py/tuple": []}, {}, null, null]}]}, null, null]}]}, null, null]}}, null, null]}]}, null, null]}"""
    assert jsonpickle.encode(type_map) == """{"N": {"py/object": "lightdp.type.Type", "left": "num", "right": {"py/reduce": [{"py/type": "_ast.Module"}, {"py/tuple": []}, {"body": [{"py/reduce": [{"py/type": "_ast.Expr"}, {"py/tuple": []}, {"col_offset": 0, "lineno": 1, "value": {"py/reduce": [{"py/type": "_ast.Num"}, {"py/tuple": []}, {"col_offset": 0, "lineno": 1, "n": 0}, null, null]}}, null, null]}]}, null, null]}}, "T": {"py/id": 0}, "epsilon": {"py/id": 0}, "len": {"py/id": 0}}"""
