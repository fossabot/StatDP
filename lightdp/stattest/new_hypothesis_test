import numpy as np
from inspect import isfunction
from algorithms import noisymax,sparsevector


def test(cx,cy,epsilon,iterations):
    counter=0
    for i in range(iterations):
        r=np.random.binomial(cx,1/(np.exp(epsilon)))
        t=np.random.binomial(cy+r,0.5)
        if t>=r:
            counter+=1

    return counter/iterations

def index_sd_s_selector(xs, ys,iterations):

    c=10
    max=0
    maxi=0

    for i in range(0,iterations):
        p=(xs.count(i)+c) / (len(xs)+c)
        q=(ys.count(i)+c) / (len(ys)+c)

        if p==0 and q==0:
            sddiff=0
        else:
            sddiff=abs((p-q)/((p*(1-p) + q*(1-q))**(1/2)))

        if max<sddiff:
            max=sddiff
            maxi=i

    return [maxi]


def main(algorithm,D1,D2,eps,epsilon,iterations):

    assert isfunction(noisymax)

    xs=[algorithm(D1,eps) for _ in range(iterations)]
    ys=[algorithm(D2,eps) for _ in range(iterations)]
    S=index_sd_s_selector(xs,ys,len(D1))
    xh = [algorithm(D1, eps) for _ in range(iterations)]
    yh = [algorithm(D2, eps) for _ in range(iterations)]
    cx=len([x for x in xh if x in S])
    cy=len([y for y in yh if y in S])
    if cx>cy:
        p=test(cx,cy,epsilon,iterations)
    else:
        p = test(cy, cx, epsilon,iterations)

    return p


if __name__=="__main__":
    D1 = [10.047838788362302, 9.156301318712105, 9.934576874381165, 10.818923545533439, 10.964414221707846,
          9.814549818258723, 10.343685529387757, 10.270895438249106, 10.422325599687007, 9.498322242077997]
    D2 = [11.04783, 10.10206, 10.85322, 10.04784, 10.04784, 10.40406, 10.04784, 9.664679999999999, 9.660929999999999,
          10.06784]

    for eps in np.arange(2,6,0.1):
        print([eps,main(sparsevector,D1,D2,eps,2,10000)])
